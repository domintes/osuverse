'use client';

import React, { useState } from 'react';
import './beatmapModal.scss';
import { motion, AnimatePresence } from 'framer-motion';

export default function BeatmapModal({ 
  isOpen, 
  onClose, 
  beatmapset, 
  beatmap = null, 
  onSubmit,
  initialTags = []
}) {
  const [tags, setTags] = useState(
    initialTags.map(tag => typeof tag === 'string' ? { tag, tag_value: 0 } : tag)
  );
  const [notes, setNotes] = useState('');

  const handleAddTag = () => {
    setTags([...tags, { tag: '', tag_value: 0 }]);
  };

  const handleRemoveTag = (idx) => {
    setTags(prevTags => prevTags.filter((_, i) => i !== idx));
  };

  const handleTagChange = (idx, value) => {
    setTags(prevTags => 
      prevTags.map((tag, i) => 
        i === idx ? { ...tag, tag: value } : tag
      )
    );
  };

  const handleTagValueChange = (idx, value) => {
    const numValue = parseInt(value, 10) || 0;
    const clampedValue = Math.max(-5, Math.min(5, numValue));
    
    setTags(prevTags => 
      prevTags.map((tag, i) => 
        i === idx ? { ...tag, tag_value: clampedValue } : tag
      )
    );
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit({ tags, notes });
  };

  // Automatycznie wygenerowane tagi (na podstawie beatmapy)
  const getAutoGeneratedTags = () => {
    if (!beatmapset) return [];
    
    const autoTags = [];
    
    // Artysta
    if (beatmapset.artist) {
      autoTags.push({ section: 'Artists', tag: beatmapset.artist });
    }
    
    // Mapper
    if (beatmapset.creator) {
      autoTags.push({ section: 'Mappers', tag: beatmapset.creator });
    }
    
    // Poziom trudności (tylko jeśli wybrany jest konkretny beatmap)
    if (beatmap) {
      let diffCategory = 'unknown';
      const stars = beatmap.difficulty_rating;
      
      if (stars < 4) diffCategory = 'normal: 0.00-3.99*';
      else if (stars < 5.5) diffCategory = 'casual: 4.00-5.49*';
      else if (stars < 6.7) diffCategory = 'expert: 5.50-6.69*';
      else if (stars < 8) diffCategory = 'extreme: 6.70-7.99*';
      else if (stars < 10) diffCategory = 'ultimate: 8.00-9.99*';
      else diffCategory = 'voidium: 10.00-infinity';
      
      autoTags.push({ section: 'Difficulty', tag: diffCategory });
    }
    
    return autoTags;
  };
  
  const autoGeneratedTags = getAutoGeneratedTags();

  if (!isOpen || !beatmapset) return null;

  return (
    <AnimatePresence>
      <motion.div 
        className="beatmap-modal-backdrop"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
      >
        <motion.div 
          className="beatmap-modal-content"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -50 }}
          onClick={e => e.stopPropagation()}
        >
          <button className="beatmap-modal-close" onClick={onClose}>×</button>
          
          <h2 className="beatmap-modal-title">
            Dodaj do kolekcji
          </h2>
          
          <div className="beatmap-modal-preview">
            <div 
              className="beatmap-modal-cover"
              style={{ 
                backgroundImage: `url(${beatmapset.covers?.cover || beatmapset.covers?.card || ''})` 
              }} 
            />
            <div className="beatmap-modal-info">
              <h3>{beatmapset.artist} - {beatmapset.title}</h3>
              <p>mapped by {beatmapset.creator}</p>
              {beatmap && (
                <p className="beatmap-modal-difficulty">
                  {beatmap.version} ({beatmap.difficulty_rating.toFixed(2)}★)
                </p>
              )}
            </div>
          </div>
          
          <form onSubmit={handleSubmit}>
            <div className="beatmap-modal-field">
              <label>Custom User Tags:</label>
              <div className="beatmap-modal-tags">
                {tags.map((tag, idx) => (
                  <div className="beatmap-modal-tag-row" key={idx}>
                    <input 
                      type="text" 
                      value={tag.tag}
                      onChange={e => handleTagChange(idx, e.target.value)}
                      placeholder="Tag name" 
                      className="beatmap-modal-tag-input"
                    />
                    <div className="beatmap-modal-tag-value-container">
                      <input 
                        type="number" 
                        value={tag.tag_value}
                        onChange={e => handleTagValueChange(idx, e.target.value)}
                        className="beatmap-modal-tag-value" 
                        min="-5"
                        max="5"
                        title="Wartość taga (-5 do 5)"
                      />
                      <span className="beatmap-modal-tag-value-label">Priority</span>
                    </div>
                    <button 
                      type="button" 
                      onClick={() => handleRemoveTag(idx)}
                      className="beatmap-modal-tag-remove"
                      aria-label="Remove tag"
                    >
                      ×
                    </button>
                  </div>
                ))}
                <button 
                  type="button" 
                  onClick={handleAddTag}
                  className="beatmap-modal-add-tag"
                >
                  + Add Tag
                </button>
              </div>
            </div>
            
            <div className="beatmap-modal-field">
              <label htmlFor="beatmap-notes">Notes:</label>
              <textarea
                id="beatmap-notes"
                value={notes}
                onChange={e => setNotes(e.target.value)}
                className="beatmap-modal-notes"
                placeholder="Add notes about this beatmap"
              />
            </div>
            
            {autoGeneratedTags.length > 0 && (
              <div className="beatmap-modal-field">
                <label>Auto Generated Tags:</label>
                <div className="beatmap-modal-auto-tags">
                  {autoGeneratedTags.map((tag, idx) => (
                    <div className="beatmap-modal-auto-tag" key={idx}>
                      <span className="beatmap-modal-auto-tag-section">{tag.section}:</span>
                      <span className="beatmap-modal-auto-tag-name">{tag.tag}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <div className="beatmap-modal-actions">
              <button type="submit" className="beatmap-modal-submit">Save</button>
              <button type="button" className="beatmap-modal-cancel" onClick={onClose}>Cancel</button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}
