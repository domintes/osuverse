import React, { useState, useMemo } from 'react';
import { useAtom } from 'jotai';
import { collectionsAtom } from '@/store/collectionAtom';
import './addBeatmapForm.scss';

// Przykładowe auto-generated tags (możesz podmienić na props lub API)
const getAutoGeneratedTags = (beatmap) => {
  if (!beatmap) return [];
  const tags = [];
  if (beatmap.artist) tags.push({ section: 'Artists', tag: beatmap.artist });
  if (beatmap.mapper) tags.push({ section: 'Mappers', tag: beatmap.mapper });
  if (beatmap.starRating) {
    let diff = 'unknown';
    if (beatmap.starRating < 4) diff = 'normal: 0.00-3.99*';
    else if (beatmap.starRating < 5.5) diff = 'casual: 4.00-5.49*';
    else if (beatmap.starRating < 6.7) diff = 'expert: 5.50-6.69*';
    else if (beatmap.starRating < 8) diff = 'extreme: 6.70-7.99*';
    else if (beatmap.starRating < 10) diff = 'ultimate: 8.00-9.99*';
    else diff = 'voidium: 10.00-infinity';
    tags.push({ section: 'Difficulty', tag: diff });
  }
  return tags;
};

const AddBeatmapForm = ({ beatmap, onSubmit, onCancel, initialState }) => {
  // Access user's collections to populate collection select and suggested tags
  const [collections] = useAtom(collectionsAtom);

  // Normalize incoming tags to objects {tag, tag_value}
  const normalizeTags = (arr) => (arr || []).map(t => (typeof t === 'string' ? { tag: t, tag_value: 0 } : { tag: t.tag || '', tag_value: t.tag_value || 0 }));

  // userTags: [{tag, tag_value}]
  const [tags, setTags] = useState(normalizeTags(initialState?.tags || (beatmap?.userTags || [])));
  const [notes, setNotes] = useState(initialState?.notes || '');

  // Persist selected collection between modal opens using initialState or fallback to first collection
  const defaultCollectionId = initialState?.collectionId || (collections?.collections && collections.collections[0]?.id) || '';
  const [selectedCollectionId, setSelectedCollectionId] = useState(defaultCollectionId);

  // Derived suggested tags from user's collections
  const suggestedTags = useMemo(() => {
    const map = {};
    Object.values(collections?.beatmaps || {}).forEach(bm => {
      (bm.userTags || []).forEach(t => {
        const tag = typeof t === 'string' ? t : (t.tag || '');
        if (!tag) return;
        map[tag] = (map[tag] || 0) + 1;
      });
    });
    return Object.entries(map).sort((a, b) => b[1] - a[1]).map(([tag, count]) => ({ tag, count }));
  }, [collections]);

  // Dodawanie/edycja tagów
  const handleTagInput = (e, idx) => {
    const value = e.target.value;
    setTags(tags => tags.map((t, i) => i === idx ? { ...t, tag: value } : t));
  };
  const handleTagValueInput = (e, idx) => {
    const value = parseInt(e.target.value, 10) || 0;
    setTags(tags => tags.map((t, i) => i === idx ? { ...t, tag_value: value } : t));
  };
  const handleAddTag = () => setTags([...tags, { tag: '', tag_value: 0 }]);
  const handleRemoveTag = (idx) => setTags(tags => tags.filter((_, i) => i !== idx));

  const addSuggestedTag = (tag) => {
    // If an empty slot exists, fill it, otherwise append
    const emptyIdx = tags.findIndex(t => !t.tag);
    if (emptyIdx !== -1) {
      setTags(tags => tags.map((t, i) => i === emptyIdx ? { ...t, tag } : t));
    } else {
      setTags(tags => [...tags, { tag, tag_value: 0 }]);
    }
  };

  // Dodawanie auto-generated tags (nieedytowalne)
  const autoTags = getAutoGeneratedTags(beatmap);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Pass tags, notes and selected collectionId
    onSubmit({ tags, notes, collectionId: selectedCollectionId });
    // Reset only tags/notes but keep selected collection as requested
    setTags([]);
    setNotes('');
  };

  return (
    <form className="add-beatmap-form" onSubmit={handleSubmit}>
      <h2>Add beatmap to collection</h2>
      <div className="beatmap-preview">
        <div className="cover" style={{ backgroundImage: `url(${beatmap?.cover || ''})` }} />
        <div className="info">
          <div style={{ fontWeight: 600 }}>{beatmap?.artist} – {beatmap?.title}</div>
        </div>
      </div>
      <label>Select Collection:
        <div className="collection-select">
          <select value={selectedCollectionId} onChange={e => setSelectedCollectionId(e.target.value)}>
            {(collections?.collections || []).map(c => (
              <option key={c.id} value={c.id}>{c.name}</option>
            ))}
          </select>
        </div>
      </label>

      <label>Custom User Tags:
        <div className="tags-list">
          {tags.map((t, idx) => (
            <div className="tag-row" key={idx}>
              <input
                type="text"
                value={t.tag}
                onChange={e => handleTagInput(e, idx)}
                placeholder="#Cool_Techs"
                className="tag-input"
              />
              <input
                type="number"
                value={t.tag_value}
                onChange={e => handleTagValueInput(e, idx)}
                min={-5}
                max={5}
                className="tag-value-input"
                title="Priorytet tagu (-5 do 5)"
              />
              <button type="button" className="remove-tag-btn" onClick={() => handleRemoveTag(idx)} title="Usuń tag">×</button>
            </div>
          ))}
          <button type="button" className="add-tag-btn" onClick={handleAddTag}>+ Add tag</button>
        </div>
      </label>
      <label>Suggested tags:
        <div className="suggested-tags">
          {suggestedTags.map((t) => (
            <button type="button" key={t.tag} className="suggested-tag" onClick={() => addSuggestedTag(t.tag)}>#{t.tag} <span className="count">({t.count})</span></button>
          ))}
          {suggestedTags.length === 0 && <div className="suggested-empty">No suggested tags yet</div>}
        </div>
      </label>

      <label>Auto Generated Tags:
        <div className="tags-list auto-tags">
          {autoTags.map((t, idx) => (
            <span className="auto-tag" key={idx} title={t.section}>{t.tag}</span>
          ))}
          {autoTags.length === 0 && <span className="auto-tag empty">None</span>}
        </div>
      </label>
      <label>Notes (optional):
        <textarea value={notes} onChange={e => setNotes(e.target.value)} placeholder="Add yours note.." />
      </label>
      <div className="form-actions">
        <button type="submit" className="submit-btn">Add</button>
        <button type="button" className="cancel-btn" onClick={onCancel}>Cancel</button>
      </div>
    </form>
  );
};

export default AddBeatmapForm;
